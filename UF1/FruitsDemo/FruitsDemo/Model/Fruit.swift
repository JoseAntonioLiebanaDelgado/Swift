// Importa el framework Foundation, que proporciona clases y funcionalidades b치sicas.
import Foundation

// Define una estructura 'Fruit' que cumple con los protocolos 'Hashable' e 'Identifiable'.
// Las instancias de Fruit pueden ser utilizadas en colecciones que requieren hashing (como Set o como claves en Dictionary).
// Cada Fruit puede ser identificado de manera 칰nica (necesario para SwiftUI cuando se manejan colecciones de datos en la UI).

/*La Diferencia:
 
Hashable es como el c칩digo de barras: ayuda a identificar r치pidamente el tipo de producto en una colecci칩n grande (como un supermercado) pero no es imposible (aunque s칤 muy raro) que dos productos diferentes tengan el mismo c칩digo.
Identifiable es como el n칰mero de serie: asegura que cada dispositivo sea 칰nico y rastreable individualmente, sin posibilidad de duplicados.
Entonces, en el contexto de tu aplicaci칩n, si tienes una lista de frutas:

Hashable permite que Swift sepa si una fruta ya est치 en una colecci칩n o no, bas치ndose en su "c칩digo de barras" (valor hash).
Identifiable permite que SwiftUI mantenga un seguimiento de cada fruta individual en una lista de UI, usando su "n칰mero de serie" (id), asegurando que las operaciones como eliminar o mover frutas en la lista se hagan en la fruta correcta.*/

struct Fruit: Hashable, Identifiable {
    
    // Define una propiedad 'id' que es 칰nica para cada instancia de 'Fruit'.
    // Aqu칤 hay un error: 'some Hashable{name}' no es una sintaxis v치lida para definir una propiedad 'id'.
    // Probablemente se pretend칤a usar 'var id = UUID()' para generar un identificador 칰nico o simplemente 'var id: String { name }'.
    var id: some Hashable{name}
    
    // Define una propiedad 'name' de tipo 'String' para almacenar el nombre de la fruta.
    var name: String
    
    // Define una propiedad 'emoji' de tipo 'EmojiFruit' para almacenar el emoji asociado con la fruta.
    var emoji: EmojiFruit
    
    // Define una propiedad 'description' de tipo 'String' para almacenar una descripci칩n de la fruta.
    var description: String
}

// Define un 'enum' llamado 'EmojiFruit' que hereda de 'String' y cumple con el protocolo 'CaseIterable'.
enum EmojiFruit: String, CaseIterable {
    // Define casos para diferentes frutas, donde cada caso tiene asociado un valor de tipo 'String' que representa un emoji.
    case apple = "游꼝"
    case banana = "游꼛"
    case coco = "游본"
    case grape = "游꼖"
    case kiwi = "游볳"
    case lemon = "游꼚"
    case orange = "游꼙"
    case pear = "游꼟"
    case pineapple = "游꼜"
    case strawberry = "游꼡"
    case watermelon = "游꼘"
}
